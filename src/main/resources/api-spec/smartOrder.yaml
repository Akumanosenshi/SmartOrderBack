openapi: 3.0.3
info:
  title: API Restaurant
  description: API REST pour la gestion d’un restaurant (plats, utilisateurs, réservations, commandes)
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Serveur local de développement

security:
  - bearerAuth: []

paths:
  /Meal:
    get:
      summary: Retrouver un plat
      tags: [Meals]
      security:
        - bearerAuth: []
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plat trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '404':
          description: Plat non trouvé
    post:
      summary: Publier un nouveau plat
      tags: [Meals]
      security:
        - bearerAuth: []
      operationId: publishMeal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Meal'
      responses:
        '200':
          description: Nouveau plat publié avec succès
        '409':
          description: Plat déjà existant
    put:
      summary: Mettre à jour un plat (ne modifie par le titre)
      tags: [Meals]
      security:
        - bearerAuth: []
      operationId: updateMeal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
      responses:
        '200':
          description: Plat mis à jour avec succès
        '404':
          description: Plat non trouvé
    delete:
      summary: Supprimer un plat
      tags: [Meals]
      security:
        - bearerAuth: []
      operationId: deleteMeal
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plat supprimé avec succès
        '404':
          description: Plat non trouvé

  /Meal/categories:
    get:
      summary: Liste des catégories de plats
      tags: [Meals]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des catégories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /Meal/all:
    get:
      summary: Liste tous les plats
      tags: [Meals]
      security:
        - bearerAuth: []
      operationId: ListMeals
      parameters:
        - name: title
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Liste des plats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'

  /auth/register:
    post:
      summary: Inscription d’un nouvel utilisateur
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /auth/login:
    post:
      summary: Connexion d’un utilisateur (JWT)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                motDePasse:
                  type: string
      responses:
        '201':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /statistics:
    get:
      summary: Récupérer les statistiques du restaurant sur une période
      tags: [Statistics]
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          description: Date de début de la période
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          required: true
          description: Date de fin de la période
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Statistiques calculées avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistics'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /reservations:
    post:
      summary: Créer une réservation
      tags: [Reservations]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: Réservation créée avec succès
        '409':
          $ref: '#/components/responses/BadRequestError'
    put:
      summary: Mettre à jour une réservation
      tags: [Reservations]
      security:
        - bearerAuth: []
      operationId: updateReservation
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Réservation mise à jour avec succès
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Supprimer une réservation
      tags: [Reservations]
      security:
        - bearerAuth: []
      operationId: deleteReservation
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Réservation supprimée avec succès
        '404':
          $ref: '#/components/responses/NotFoundError'

  /reservations/all:
    get:
      summary: Liste des réservations
      tags: [Reservations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des réservations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'

  /reservations/user:
    get:
      summary: Retrouver une réservation par utilisateur
      tags: [Reservations]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Réservation trouvée
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /Order:
    post:
      summary: Passer une commande
      tags: [Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Commande passée avec succès

  /Order/all:
    get:
      summary: Liste des commandes
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des commandes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /Order/user:
    get:
      summary: Retrouver des commandes par utilisateur
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Commande trouvée
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /Order/changeState:
    put:
      summary: Changer l’état d’une commande
      tags: [Orders]
      security:
        - bearerAuth: []
      operationId: changeOrderState
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: state
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/State'
      responses:
        '200':
          description: Commande mise à jour avec succès
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Meal:
      type: object
      properties:
        title:
          type: string
        category:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        emoji:
          type: string

    User:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        mdp:
          type: string

    UserPublic:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        role:
          type: string

    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
        nbrPeople:
          type: integer
        user:
          $ref: '#/components/schemas/UserPublic'
        validated:
          type: boolean

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/UserPublic'
        meals:
          type: array
          items:
            $ref: '#/components/schemas/Meal'
        date:
          type: string
          format: date-time
        total:
          type: number
          format: double
        state:
          $ref: '#/components/schemas/State'

    State:
      type: string
      enum:
        - PENDING
        - IN_PROGRESS
        - READY_FOR_PICKUP
        - COMPLETED
        - CANCELLED

    Statistics:
      type: object
      properties:
        topMeals:
          type: array
          items:
            $ref: '#/components/schemas/Meal'
        totalOrders:
          type: integer
        totalRevenue:
          type: number
          format: double
        averageCart:
          type: number
          format: double
        totalReservations:
          type: integer
        averagePeoplePerReservation:
          type: integer

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        user:
          $ref: '#/components/schemas/UserPublic'

    Role:
      type: string
      enum:
        - USER
        - RESTAURANT

  responses:
    UnauthorizedError:
      description: JWT token invalide ou manquant
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized"

    ForbiddenError:
      description: Accès refusé (droits insuffisants)
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Forbidden"

    BadRequestError:
      description: Requête invalide (syntaxe, format ou champ manquant)
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Bad Request"

    NotFoundError:
      description: Ressource non trouvée
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Not Found"

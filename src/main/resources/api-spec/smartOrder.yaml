openapi: 3.0.3
info:
  title: API Restaurant
  description: API REST pour la gestion d’un restaurant (plats, utilisateurs, réservations, commandes)
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Serveur local de développement

paths:
  /Meal:
    get:
      summary: Retrouver un plat
      tags: [Meals]
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plat trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '404':
          description: Plat non trouvé
    post:
      summary: Publier un nouveau plat
      tags: [Meals]
      operationId: publishMeal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
      responses:
        '200':
          description: Nouveau plat publié avec succès
        '409':
          description: Plat déjà existant
    put:
      summary: Mettre à jour un plat
      tags: [Meals]
      operationId: updateMeal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
      responses:
        '200':
          description: Plat mis à jour avec succès
        '404':
          description: Plat non trouvé
    delete:
      summary: Supprimer un plat
      tags: [Meals]
      operationId: deleteMeal
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plat supprimé avec succès
        '404':
          description: Plat non trouvé

  /Meal/categories:
    get:
      summary: Liste des catégories de plats
      tags: [Meals]
      responses:
        '200':
          description: Liste des catégories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /Meal/all:
    get:
      summary: Liste tous les plats
      tags: [Meals]
      operationId: ListMeals
      parameters:
        - name: title
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Liste des plats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'

  /auth/register:
    post:
      summary: Inscription d’un nouvel utilisateur
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Utilisateur inscrit avec succès

  /auth/login:
    post:
      summary: Connexion d’un utilisateur (JWT)
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                motDePasse:
                  type: string
      responses:
        '200':
          description: Connexion réussie (retourne un token JWT)
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /auth/delete:
    delete:
      summary: Supprimer un utilisateur
      tags: [Users]
      operationId: deleteUser
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Utilisateur supprimé avec succès
        '404':
          description: Utilisateur non trouvé

  /reservations:
    post:
      summary: Créer une réservation
      tags: [Reservations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: Réservation créée avec succès
        '409':
          description: Réservation déjà existante
    put:
      summary: Mettre à jour une réservation
      tags: [Reservations]
      operationId: updateReservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: Réservation mise à jour avec succès
        '404':
          description: Réservation non trouvée
    delete:
      summary: Supprimer une réservation
      tags: [Reservations]
      operationId: deleteReservation
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Réservation supprimée avec succès
        '404':
          description: Réservation non trouvée

  /reservations/all:
    get:
      summary: Liste des réservations
      tags: [Reservations]
      responses:
        '200':
          description: Liste des réservations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'

  /reservations/user:
    get:
      summary: Retrouver une réservation
      tags: [Reservations]
      parameters:
        - name: UserId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Réservation trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '404':
          description: Réservation non trouvée

  /Order:
    post:
      summary: Passer une commande
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Commande passée avec succès
    delete:
      summary: Supprimer une commande
      tags: [Orders]
      operationId: deleteOrder
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Commande supprimée avec succès
        '404':
          description: Commande non trouvée

  /Order/current:
    get:
      summary: Retrouver les commandes en cours
      tags: [Orders]
      responses:
        '200':
          description: Commande trouvée
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Commande non trouvée

  /Order/all:
    get:
      summary: Liste des commandes
      tags: [Orders]
      responses:
        '200':
          description: Liste des commandes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /Order/user:
    get:
      summary: Retrouver des commandes par utilisateur
      tags: [Orders]
      parameters:
        - name: UserId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Commande trouvée
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Commande non trouvée

components:
  schemas:
    Meal:
      type: object
      properties:
        title:
          type: string
        category:
          type: string
        description:
          type: string
        image:
          type: string

    User:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        mdp:
          type: string
        role:
          type: string

    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          format: local-date
        nbrPeople:
          type: integer
        user:
          $ref: '#/components/schemas/User'

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
        meals:
          type: array
          items:
            $ref: '#/components/schemas/Meal'
        date:
          type: string
          format: date
        total:
          type: number
          format: double

openapi: 3.0.3
info:
  title: API Restaurant
  description: API REST pour la gestion d’un restaurant (plats, utilisateurs, réservations, commandes)
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Serveur local de développement

paths:
  /Meal:
    get:
      summary: Liste tous les plats
      tags: [Meals]
      operationId: ListMeals
      parameters:
        - name: title
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Liste des plats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'
    post:
      summary: Publier un nouveau plat
      tags: [ Meals ]
      operationId: publishMeal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
      responses:
        '200':
          description: Nouveau plat publié avec succès
        '409':
          description: Plat déjà existant

  /auth/register:
    post:
      summary: Inscription d’un nouvel utilisateur
      tags: [Authentification]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Utilisateur inscrit avec succès

  /auth/login:
    post:
      summary: Connexion d’un utilisateur (JWT)
      tags: [Authentification]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                motDePasse:
                  type: string
      responses:
        '200':
          description: Connexion réussie (retourne un token JWT)
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /reservations:
    post:
      summary: Créer une réservation
      tags: [Reservations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: Réservation créée avec succès
        '409':
            description: Réservation déjà existante
  /reservations/all:
      get:
        summary: Liste des réservations
        tags: [Reservations]
        responses:
          '200':
            description: Liste des réservations
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Reservation'
  /reservations/user:
        get:
          summary: retrouver une réservation
          tags: [Reservations]
          responses:
            '200':
              description: Réservation trouvée
              content:
                application/json:
                    schema:
                      $ref: '#/components/schemas/Reservation'
            '404':
                description: Réservation non trouvée
        parameters:
          - name: UserEmail
            in: query
            required: true
            schema:
                type: string

  /Order:
    post:
      summary: Passer une commande
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Commande passée avec succès
  /Order/all:
    get:
        summary: Liste des commandes
        tags: [Orders]
        responses:
          '200':
            description: Liste des commandes
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Order'
  /Order/user:
    get:
      summary: retrouver des commande
      tags: [Orders]
      responses:
        '200':
          description: Commande trouvée
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Commande non trouvée
    parameters:
      - name: UserEmail
        in: query
        required: true
        schema:
          type: string

  /MealsCategories :
    get:
      summary: Liste des catégories de plats
      tags: [MealsCategories]
      responses:
        '200':
          description: Liste des catégories de plats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MealCategory'
    post:
      summary: Ajouter une nouvelle catégorie de plat
      tags: [MealsCategories]
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Nouvelle catégorie ajoutée avec succès
        '409':
          description: Catégorie déjà existante

components:
  schemas:
    Meal:
      type: object
      properties:
        title:
          type: string
        category:
          type: string
        description:
          type: string
        image:
          type: string
    User:
      type: object
      properties:
        firstname:
          type: string
        lastname:
            type: string
        email:
          type: string
        mdp:
          type: string
        role:
          type: string

    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          format: local-date
        nbrPeople:
          type: integer
        user:
          $ref: '#/components/schemas/User'

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
        meals:
          type: array
          items:
            $ref: '#/components/schemas/Meal'
        date:
          type: string
          format: local-date
        total:
          type: number
          format: double
    MealCategory:
      type: string
      description: category of meal